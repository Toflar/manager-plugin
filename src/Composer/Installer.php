<?php

/*
 * This file is part of Contao.
 *
 * Copyright (c) 2005-2017 Leo Feyer
 *
 * @license LGPL-3.0+
 */

namespace Contao\ManagerPlugin\Composer;

use Contao\ManagerPlugin\Dependency\DependencyResolverTrait;
use Contao\ManagerPlugin\Dependency\DependentPluginInterface;
use Contao\ManagerPlugin\Dependency\UnresolvableDependenciesException;
use Contao\ManagerPlugin\PluginLoader;

class Installer
{
    use DependencyResolverTrait;

    private static $generatedClassTemplate = <<<'PHP'
<?php

namespace Contao\ManagerPlugin\Composer;

/**
 * This class is generated by contao/manager-bundle, specifically by
 * @see \Contao\ManagerBundle\Composer\Installer
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 */
class PluginLoader
{
    const BUNDLE_PLUGINS = 'Contao\ManagerPlugin\Bundle\BundlePluginInterface';
    const CONFIG_PLUGINS = 'Contao\ManagerPlugin\Config\ConfigPluginInterface';
    const EXTENSION_PLUGINS = 'Contao\ManagerPlugin\Config\ExtensionPluginInterface';
    const ROUTING_PLUGINS = 'Contao\ManagerPlugin\Routing\RoutingPluginInterface';

    /**
     * @var array
     */
    private $plugins = %s;

    /**
     * @var array
     */
    private $disabled = %s;

    /**
     * Returns all active plugin instances.
     *
     * @return array
     */
    public function getInstances()
    {
        return array_diff_key($this->plugins, array_flip($this->disabled));
    }

    /**
     * Returns the active plugin instances of a given type (see class constants).
     *
     * @param string $type
     * @param bool   $reverseOrder
     *
     * @return array
     */
    public function getInstancesOf($type, $reverseOrder = false)
    {
        $plugins = array_filter(
            $this->getInstances(),
            function ($plugin) use ($type) {
                return is_a($plugin, $type);
            }
        );

        $plugins = $reverseOrder ? array_reverse($plugins, true) : $plugins;

        return array_diff_key($plugins, array_flip($this->disabled));
    }
}

PHP;

    private $pluginLoader;
    private $ref;

    private $plugins;
    private $disabled;

    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->pluginLoader = new PluginLoader();
        $this->ref = new \ReflectionClass($this->pluginLoader);

        $plugins = $this->ref->getProperty('plugins');
        $plugins->setAccessible(true);
        $this->plugins = $plugins->getValue($this->pluginLoader);

        $disabled = $this->ref->getProperty('disabled');
        $disabled->setAccessible(true);
        $this->disabled = $disabled->getValue($this->pluginLoader);
    }

    /**
     * Sets the Contao Manager plugins.
     *
     * @param array $plugins
     */
    public function setPlugins(array $plugins)
    {
        $this->plugins = $this->orderPlugins($plugins);

        // Instantiate a global plugin to load AppBundle or other customizations
        $appPlugin = '\ContaoManagerPlugin';

        if (class_exists($appPlugin)) {
            $this->plugins['app'] = new $appPlugin();
        }
    }

    /**
     * Sets the disabled packages.
     *
     * @param array $disabled
     */
    public function setDisabled(array $disabled)
    {
        $this->disabled = $disabled;
    }

    /**
     * Dumps the PluginLoader class.
     */
    public function dumpClass()
    {
        $content = sprintf(
            static::$generatedClassTemplate,
            var_export($this->plugins, true),
            var_export($this->disabled, true)
        );

        file_put_contents($this->ref->getFileName(), $content);
    }

    /**
     * Orders the plugins.
     *
     * @param array $plugins
     *
     * @throws UnresolvableDependenciesException
     *
     * @return array
     */
    protected function orderPlugins(array $plugins)
    {
        $this->plugins = [];

        $ordered = [];
        $dependencies = [];
        $packages = array_keys($plugins);

        // Load the manager bundle first
        if (isset($plugins['contao/manager-bundle'])) {
            array_unshift($packages, 'contao/manager-bundle');
            $packages = array_unique($packages);
        }

        // Walk through the packages
        foreach ($packages as $packageName) {
            $dependencies[$packageName] = [];

            if ($plugins[$packageName] instanceof DependentPluginInterface) {
                $dependencies[$packageName] = $plugins[$packageName]->getPackageDependencies();
            }
        }

        foreach ($this->orderByDependencies($dependencies) as $packageName) {
            $ordered[$packageName] = $plugins[$packageName];
        }

        return $ordered;
    }
}
